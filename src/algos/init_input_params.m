function input_params_vec=init_input_params(name)


if~iscell(name)
    name={name};
end

input_params_vec = [];

for ilu=1:length(name)
    switch name{ilu}
        case 'Feature_bool'
            tmp = input_param_cl('Name','Feature_bool','Value',false,'Default_value',false,'Value_range',[true false],...
                'Precision','%d','Validation_fcn',@(x) islogical(x),'Disp_name','Integrate 3D features','Tooltipstring','Integrate 3D features','Units','');
        case 'Zext_min'
            tmp = input_param_cl('Name','Zext_min','Value',10,'Default_value',10,'Value_range',[0 1000],...
                'Precision','%.1f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Min 3D Z extent','Tooltipstring','Minimum vertical extent for detected cluster to be kept','Units','m');
          case 'Hext_min'
            tmp = input_param_cl('Name','Hext_min','Value',50,'Default_value',50,'Value_range',[0 1000],...
                'Precision','%.1f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Min 3D H extent','Tooltipstring','Minimum horizontal extent for detected cluster to be kept','Units','m');
        case 'geo_ref'
            tmp = input_param_cl('Name','geo_ref','Value','Ship','Default_value','ship','Value_range',{'Ship' 'Geo'},...
                'Precision','%s','Validation_fcn',@(x) ismember(lower(x),lower({'ship' 'geo'})),'Disp_name','Reference','Tooltipstring','Reference used for sample positionning. Ship: across/along distance. Geo: Easth/North','Units','');
        case 'enhance'                   
            tmp = input_param_cl('Name','enhance','Value',true,'Default_value',true,'Value_range',[true false],...
                'Precision','%d','Validation_fcn',@(x) islogical(x),'Disp_name','Refine algo','Tooltipstring','Refine bad pings algorithm','Units','');        
		case 'beamAngle_min'
            tmp = input_param_cl('Name','beamAngle_min','Value',-90,'Default_value',-90,'Value_range',[-90 90],...
                'Precision','%.0f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Min. beam angle','Tooltipstring','Minimum beam angle','Units','deg.');
        case 'beamAngle_max'
            tmp = input_param_cl('Name','beamAngle_max','Value',90,'Default_value',90,'Value_range',[-90 90],...
                'Precision','%.0f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Max. beam angle','Tooltipstring','Maximum beam angle','Units','deg.');
        case 'numPing_min'
            tmp = input_param_cl('Name','numPing_min','Value',10,'Default_value',10,'Value_range',[0 inf],...
                'Precision','%.0f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Min. Number of pings','Tooltipstring','Minimum number of pings','Units','');
        case 'median_filter_bool'
            tmp = input_param_cl('Name','median_filter_bool','Value',true,'Default_value',true,'Value_range',[true false],...
                'Precision','%d','Validation_fcn',@(x) islogical(x),'Disp_name','Apply median filter','Tooltipstring','Apply median filtering.','Units','');
        case 'denoised'
            tmp = input_param_cl('Name','denoised','Value',true,'Default_value',true,'Value_range',[true false],...
                'Precision','%d','Validation_fcn',@(x) islogical(x),'Disp_name','Denoised data','Tooltipstring','Apply algorithm on denoised data','Units','');
        case 'snr_filt'
            tmp = input_param_cl('Name','snr_filt','Value',true,'Default_value',true,'Value_range',[true false],...
                'Precision','%.0f','Validation_fcn',@(x) islogical(x),'Disp_name','Filter SNR','Tooltipstring','Apply filter to the SNR (size as defined for the noise power estimation)','Units','');
        case 'cluster_tags'
            tmp = input_param_cl('Name','cluster_tags','Value',true,'Default_value',true,'Value_range',[true false],...
                'Precision','%d','Validation_fcn',@(x) islogical(x),'Disp_name','Use k-means clustering','Tooltipstring','Use k-means clustering','Units','');
        case 'thr_cluster'
            tmp = input_param_cl('Name','thr_cluster','Value',50,'Default_value',50,'Value_range',[0 100],...
                'Precision','%g','Validation_fcn',@(x) isnumeric(x),'Disp_name','Cluster thr.','Tooltipstring','Use tags with a percentage overlap higher than the threshold to tag the results of the k-means clustering. If no tags satisfy the condition, takes the most probable.','Units','%');
        case 'v_filt'
            tmp = input_param_cl('Name','v_filt','Value',1.5,'Default_value',1.5,'Value_range',[0.1 100],...
                'Precision','%.1f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Vert. Filt.','Tooltipstring','Vertical filtering','Units','m');
        case 'h_filt'
            tmp = input_param_cl('Name','h_filt','Value',10,'Default_value',10,'Value_range',[0.1 1e3],...
                'Precision','%.0f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Horz. Filt.','Tooltipstring','Horizontal filtering','Units','pings');
        case 'v_buffer'
            tmp = input_param_cl('Name','v_buffer','Value',2,'Default_value',1.5,'Value_range',[0.1 100],...
                'Precision','%.1f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Vert. Buffer','Tooltipstring','Vertical buffering','Units','m');
        case 'r_min'
            tmp = input_param_cl('Name','r_min','Value',0,'Default_value',0,'Value_range',[-inf inf],...
                'Precision','%.1f','Validation_fcn',@(x) isnumeric(x),'Disp_name','Min Range','Tooltipstring','Minimum range (from transducer face)','Units','m');
        case 'r_max'
            tmp =  input_param_cl('Name','r_max','Value',inf,'Default_value',inf,'Value_range',[0 inf],...
                'Precision','%.1f','Validation_fcn',@(x) isnumeric(x),'Disp_name','Max Range','Tooltipstring','Maximum range (from transducer face)','Units','m');
        case'shift_bot'
            tmp = input_param_cl('Name','shift_bot','Value',0,'Default_value',0,'Value_range',[-inf inf],...
                'Precision','%.1f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Shift bot.','Tooltipstring','Shift bottom after detection','Units','m');
        case 'thr_bottom'
            tmp = input_param_cl('Name','thr_bottom','Value',-30,'Default_value',-20,'Value_range',[-90 30],...
                'Precision','%.0f','Validation_fcn',@(x) isnumeric(x),'Disp_name','BS. thr.','Tooltipstring','Threshold for bottom echo','Units','dB');
        case 'thr_echo'
            tmp = input_param_cl('Name','thr_echo','Value',-20,'Default_value',0,'Value_range',[-90 -10],...
                'Precision','%.0f','Validation_fcn',@(x) isnumeric(x),'Disp_name','Echo thr.','Tooltipstring','Around Echo threshold','Units','dB');
        case 'thr_backstep'
            tmp = input_param_cl('Name','thr_backstep','Value',-1,'Default_value',0,'Value_range',[-12 12],...
                'Precision','%.0f','Validation_fcn',@(x) isnumeric(x),'Disp_name','Back. thr.','Tooltipstring','Threshold for backstep','Units','dB');
        case 'thr_sv'
            tmp = input_param_cl('Name','thr_sv','Value',-70,'Default_value',-70,'Value_range',[-140 30],...
                'Precision','%.1f','Validation_fcn',@(x) isnumeric(x),'Disp_name','Sv thr. Min.','Tooltipstring','Minimum thresholding on Sv','Units','dB');
        case 'thr_sv_max'
            tmp = input_param_cl('Name','thr_sv_max','Value',-10,'Default_value',-10,'Value_range',[-140 30],...
                'Precision','%.1f','Validation_fcn',@(x) isnumeric(x),'Disp_name','Sv thr. Max.','Tooltipstring','Maximum thresholding on Sv','Units','dB');
        case 'TS_threshold'
            tmp = input_param_cl('Name','TS_threshold','Value',-65,'Default_value',-65,'Value_range',[-120 -10],...
                'Precision','%.1f','Validation_fcn',@(x) isnumeric(x),'Disp_name','TS thr. Min.','Tooltipstring','Minimum thresholding on TS','Units','dB');
        case 'Min_max_TS_track'
            tmp = input_param_cl('Name','Min_max_TS_track','Value',-65,'Default_value',-65,'Value_range',[-120 -10],...
                'Precision','%.1f','Validation_fcn',@(x) isnumeric(x),'Disp_name','Min. Max. TS in track.','Tooltipstring','Minimum maximum TS in a track (please read that twice, it is not a typo)','Units','dB');
         case 'Min_TS_track'
            tmp = input_param_cl('Name','Min_TS_track','Value',-65,'Default_value',-65,'Value_range',[-120 -10],...
                'Precision','%.1f','Validation_fcn',@(x) isnumeric(x),'Disp_name','Min. TS track.','Tooltipstring','Minimum TS in a track','Units','dB');
        case 'TS_threshold_max'
            tmp = input_param_cl('Name','TS_threshold_max','Value',0,'Default_value',0,'Value_range',[-120 0],...
                'Precision','%.1f','Validation_fcn',@(x) isnumeric(x),'Disp_name','TS thr. Max.','Tooltipstring','Maximum thresholding on TS','Units','dB');
        case 'thr_sp'
            tmp = input_param_cl('Name','thr_sp','Value',-70,'Default_value',-70,'Value_range',[-120 -10],...
                'Precision','%.1f','Validation_fcn',@(x) isnumeric(x),'Disp_name','Sp thr. Min.','Tooltipstring','Minimum thresholding on Sp','Units','dB');
        case 'thr_sp_max'
            tmp = input_param_cl('Name','thr_sp_max','Value',-35,'Default_value',-35,'Value_range',[-120 -10],...
                'Precision','%.0f','Validation_fcn',@(x) isnumeric(x),'Disp_name','Sp thr. Max.','Tooltipstring','Maximum thresholding on S','Units','dB');
        case 'MaxStdMajAxisAngle'
            tmp = input_param_cl('Name','MaxStdMajAxisAngle','Value',1,'Default_value',1,'Value_range',[0 20],...
                'Precision','%.1f','Validation_fcn',@(x)  isnumeric(x),'Disp_name',[char(hex2dec('0394')) ' Across Angle'],'Tooltipstring','Maximum stadard deviation of across postion','Units',char(hex2dec('00B0')));
        case 'MaxStdMinAxisAngle'
            tmp = input_param_cl('Name','MaxStdMinAxisAngle','Value',1,'Default_value',1,'Value_range',[0 20],...
                'Precision','%.1f','Validation_fcn',@(x)  isnumeric(x),'Disp_name',[char(hex2dec('0394')) ' Along Angle'],'Tooltipstring','Maximum stadard deviation of along postion','Units',char(hex2dec('00B0')));
        case 'thr_cum'
            tmp = input_param_cl('Name','thr_cum','Value',1e-2,'Default_value',1e-2,'Value_range',[0 100],...
                'Precision','%g','Validation_fcn',@(x) isnumeric(x),'Disp_name','Cumul. thr. Min.','Tooltipstring','Minimum Cumulative threshold','Units','%');
        case 'thr_cum_max'
            tmp = input_param_cl('Name','thr_cum_max','Value',99.999,'Default_value',99.999,'Value_range',[0 100],...
                'Precision','%g','Validation_fcn',@(x) isnumeric(x),'Disp_name','Cumul. thr. Max.','Tooltipstring','Maximum Cumulative threshold','Units','%');
        case 'ref'
            tmp = input_param_cl('Name','ref','Value',list_echo_int_ref(1),'Default_value','Surface','Value_range',list_echo_int_ref,...
                'Precision','%s','Validation_fcn',@(x) ismember(lower(x),lower(list_echo_int_ref)),'Disp_name','Reference','Tooltipstring','Reference used for WC integration','Units','');
        case 'filt_3D'
            filt_3D_methods={'None','Median','Gaussian' ,'Mean'};
            tmp = input_param_cl('Name','filt_3D','Value','None','Default_value','None','Value_range',filt_3D_methods,...
                'Precision','%s','Validation_fcn',@(x) ismember(lower(x),lower(filt_3D_methods)),'Disp_name','3D Filtering','Tooltipstring','3D Filtering method','Units','');
        case 'interp_method'
            interp_methods={'Nearest', 'Linear', 'Spline', 'Pchip', 'Makima', 'Knn'};
            tmp = input_param_cl('Name','interp_method','Value','Linear','Default_value','Linear','Value_range',interp_methods,...
                'Precision','%s','Validation_fcn',@(x) ismember(lower(x),lower(interp_methods)),'Disp_name','Interpolation method','Tooltipstring','Interpolation method used','Units','');
        case 'rm_outliers_method'
            rm_outliers_methods = {'None','Median','Mean','Quartiles','Grubbs','Gesd'};
            tmp = input_param_cl('Name','rm_outliers_method','Value','Median','Default_value','Median','Value_range',rm_outliers_methods,...
                'Precision','%s','Validation_fcn',@(x) ismember(lower(x),lower(rm_outliers_methods)),'Disp_name','Interpolation method','Tooltipstring','Outliers removal method used','Units','');
        case 'horz_link_max'
            tmp = input_param_cl('Name','horz_link_max','Value',5,'Default_value',5,'Value_range',[0 inf],...
                'Precision','%.1f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Max Horz. link','Tooltipstring','Maximum horizontal length school linking','Units','m');
        case 'vert_link_max'
            tmp = input_param_cl('Name','vert_link_max','Value',5,'Default_value',5,'Value_range',[0 inf],...
                'Precision','%.1f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Max Vert. link','Tooltipstring','Maximum vertical length school linking','Units','m');
        case 'l_min_tot'
            tmp = input_param_cl('Name','l_min_tot','Value',10,'Default_value',10,'Value_range',[0 inf],...
                'Precision','%.1f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Tot. Min. Len','Tooltipstring','School minimum length','Units','m');
        case 'h_min_tot'
            tmp = input_param_cl('Name','h_min_tot','Value',10,'Default_value',10,'Value_range',[0 inf],...
                'Precision','%.1f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Tot. Min. Hght','Tooltipstring','School minimum height','Units','m');
        case 'Max_Gap_Track'
            tmp = input_param_cl('Name','Max_Gap_Track','Value',2,'Default_value',2,'Value_range',[1 inf],...
                'Precision','%.0f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Max Gaps','Tooltipstring','Maximum number of gaps (pings)','Units','pings');
        case 'nb_min_sples'
            tmp = input_param_cl('Name','nb_min_sples','Value',100,'Default_value',100,'Value_range',[1 inf],...
                'Precision','%.0f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Min sple number','Tooltipstring','Minimum number of samples in school','Units','');
        case 'nb_min_cells'
            tmp =    input_param_cl('Name','nb_min_cells','Value',5,'Default_value',5,'Value_range',[1 inf],...
                'Precision','%.0f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Min sple cells','Tooltipstring','Minimum number of cells','Units','');
        case 'thr_motion_angular_speed'
            tmp  =  input_param_cl('Name','thr_motion_angular_speed','Value',10,'Default_value',10,'Value_range',[0 90],...
                'Precision','%.1f','Validation_fcn',@(x) isnumeric(x)&&x>=0,'Disp_name','Max ang. speed.','Tooltipstring','Maximum angular speed (pitch or roll)','Units','deg/s');
        case 'thr_sv_correction'
            tmp =  input_param_cl('Name','thr_sv_correction','Value',12,'Default_value',12,'Value_range',[0 12],...
                'Precision','%.0f','Validation_fcn',@(x)  isnumeric(x)&&x>0,'Disp_name','Max. Sv. Corr.','Tooltipstring','Maximum Sv motion correction','Units','dB');
        case 'thr_angular_motion_diff'
            tmp  =  input_param_cl('Name','thr_angular_motion_diff','Value',5,'Default_value',5,'Value_range',[0 90],...
                'Precision','%.1f','Validation_fcn',@(x) isnumeric(x)&&x>=0,'Disp_name','Max angular diff.','Tooltipstring','Maximum angular difference during ping (pitch or roll)','Units','deg');
        case 'L'
            tmp = input_param_cl('Name','L','Value',20,'Default_value',20,'Value_range',[2 inf],...
                'Precision','%.0f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','N. of aux. data','Tooltipstring','The number of auxiliary data, L.','Units','');
        case 'GC'
            tmp = input_param_cl('Name','GC','Value',2,'Default_value',2,'Value_range',[2 inf],...
                'Precision','%.0f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','N. of guard cells','Tooltipstring','The number of guard cells, GC.','Units','');
        case 'DT'
            tmp = input_param_cl('Name','DT','Value',3,'Default_value',3,'Value_range',[-100 100],...
                'Precision','%.1f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Decision thr.','Tooltipstring','Decision threshold, DT, for the test statistic.','Units','');
        case 'NBeams'
            tmp = input_param_cl('Name','NBeams','Value',1,'Default_value',1,'Value_range',[1 1000],...
                'Precision','%.0f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Beams separation','Tooltipstring','The maximum separation in beams for adjacent detections within a unique cluster, Nbeams.','Units','');
        case 'NSamps'
            tmp = input_param_cl('Name','NSamps','Value',2,'Default_value',2,'Value_range',[1 1000],...
                'Precision','%.0f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Samples separation','Tooltipstring','The maximum separation in samples for adjacent detections within a unique cluster, Nsamps.','Units','');
        case 'N_2D'
            tmp = input_param_cl('Name','N_2D','Value',20,'Default_value',20,'Value_range',[0 1e4],...
                'Precision','%.0f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Min 2D cluster size','Tooltipstring','Minimum within-ping cluster size (number of detections)','Units','');
        case 'Gx'
            tmp = input_param_cl('Name','Gx','Value',5,'Default_value',5,'Value_range',[0 1e4],...
                'Precision','%.1f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Max X-axis gap','Tooltipstring','Maximum gap along the x-axis (along-track)','Units','m');
        case 'Gy'
            tmp = input_param_cl('Name','Gy','Value',5,'Default_value',5,'Value_range',[0 1e4],...
                'Precision','%.1f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Max Y-axis gap','Tooltipstring','Maximum gap along the y-axis (across-track)','Units','m');
        case 'Gz'
            tmp = input_param_cl('Name','Gz','Value',5,'Default_value',5,'Value_range',[0 1e4],...
                'Precision','%.1f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Max Z-axis gap','Tooltipstring','Maximum gap along the z-axis (depth)','Units','m');
        case 'N_3D'
            tmp = input_param_cl('Name','N_3D','Value',50,'Default_value',50,'Value_range',[0 1e4],...
                'Precision','%.0f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Min 3D cluster size','Tooltipstring','Minimum within-ping cluster size (number of detections)','Units','');
        case 'AR_min'
            tmp = input_param_cl('Name','AR_min','Value',1,'Default_value',1,'Value_range',[0 1000],...
                'Precision','%.1f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Min 3D AR','Tooltipstring','Minimum aspect-ratio for detected cluster to be kept.','Units','');
        case 'Rext_min'
            tmp = input_param_cl('Name','Rext_min','Value',25,'Default_value',25,'Value_range',[0 1000],...
                'Precision','%.1f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Min 3D R extent','Tooltipstring','Minimum range extent for detected cluster to be kept','Units','');
        case 'stdR_min'
            tmp = input_param_cl('Name','stdR_min','Value',2,'Default_value',2,'Value_range',[0 1000],...
                'Precision','%.1f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Min 3D R std.','Tooltipstring','Minimum range standard deviation for detected cluster to be kept','Units','');
        case 'rm_specular'
            tmp = input_param_cl('Name','rm_specular','Value',true,'Default_value',true,'Value_range',[true false],...
                'Precision','%d','Validation_fcn',@(x) islogical(x),'Disp_name','Rm specular','Tooltipstring','Remove specular return (based on shortest detected range and pulse length used)','Units','');
        case 'classification_file'
            files_classif=list_classification_files();
            if isempty(files_classif)
                files_classif = {'--'};
            end
            tmp = input_param_cl('Name','classification_file','Value',files_classif{1},'Default_value',files_classif{1},'Value_range',files_classif,...
                'Precision','%s','Validation_fcn',@ischar,'Disp_name','Classification File','Tooltipstring','Classification file','Units','');
        case 'max_iter'
            tmp = input_param_cl('Name','max_iter','Value',1000,'Default_value',1000,'Value_range',[10 1e6],...
                'Precision','%.0f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Max Iter.','Tooltipstring','Maximum number of iterations','Units','');
        case 'distance'
            tmp = input_param_cl('Name','distance','Value','sqeuclidean','Default_value','Surface','Value_range',{'sqeuclidean' 'cityblock' 'cosine' 'correlation'},...
                'Precision','%s','Validation_fcn',@(x) ismember(lower(x),lower({'sqeuclidean' 'cityblock' 'cosine' 'correlation'})),'Disp_name','Distance','Tooltipstring','Distance metric, in p-dimensional space, used for minimization','Units','');
        case 'replicates'
            tmp = input_param_cl('Name','replicates','Value',1,'Default_value',1,'Value_range',[1 100],...
                'Precision','%.0f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Replicates','Tooltipstring','Number of times to repeat clustering using new initial cluster centroid positions','Units','');
        case 'create_regions'
            tmp = input_param_cl('Name','create_regions','Value',false,'Default_value',false,'Value_range',[true false],...
                'Precision','%d','Validation_fcn',@(x) islogical(x),'Disp_name','Create regions','Tooltipstring','Create regions after classifications (only for Cell by cell)','Units','');
        case 'reslice'
            tmp = input_param_cl('Name','reslice','Value',false,'Default_value',false,'Value_range',[true false],...
                'Precision','%d','Validation_fcn',@(x) islogical(x),'Disp_name','Re-integrate','Tooltipstring','Re-compute echo-integration','Units','');
        case 'gate_dB'
            tmp = input_param_cl('Name','gate_dB','Value',3,'Default_value',3,'Value_range',[0 40],...
                'Precision','%.1f','Validation_fcn',@(x) isnumeric(x),'Disp_name','Diff. thr.','Tooltipstring','Threshold on difference between pings','Units','dB');
        case 'p_int_offset'
            tmp = input_param_cl('Name','p_int_offset','Value',0.15,'Default_value',0.15,'Value_range',[0.01 0.50],...
                'Precision','%.2f','Validation_fcn',@(x) isnumeric(x),'Disp_name','Ping int. unc.','Tooltipstring','Uncertainty on the ping interval','Units','s');
        case 'copy_other_f'
            tmp = input_param_cl('Name','copy_other_f','Value',false,'Default_value',false,'Value_range',[true false],...
                'Precision','%d','Validation_fcn',@(x) islogical(x),'Disp_name','Copy to other f.','Tooltipstring','Copy false bottom echo region to other frequencies','Units','');
        case 'singleMBE_region'
            tmp = input_param_cl('Name','singleMBE_region','Value',false,'Default_value',false,'Value_range',[true false],...
                'Precision','%d','Validation_fcn',@(x) islogical(x),'Disp_name','Create single DBE','Tooltipstring','Merge the multiple bottom echo regions into a single one','Units',''); 
        case 'WC_lgth'
            tmp = input_param_cl('Name','WC_lgth','Value','deep','Default_value','deep','Value_range',{'deep' 'shallow'},...
                'Validation_fcn',@(x) ischar(x),'Disp_name','WC type','Tooltipstring','Water depth cut-off type (ex: shallow under 250 m of water)');
        case 'Ringdown_std_bool'
            tmp = input_param_cl('Name','Ringdown_std_bool','Value',true,'Default_value',true,'Value_range',[true false],...
                'Precision','%d','Validation_fcn',@(x) islogical(x),'Disp_name','Ringdown std thr.','Tooltipstring','Use Ringdown Analysis','Units','');
        case 'Ringdown_std'
            tmp = input_param_cl('Name','Ringdown_std','Value',0.05,'Default_value',0,'Value_range',[0 inf],...
                'Precision','%.2f','Validation_fcn',@(x) isnumeric(x),'Disp_name','','Tooltipstring','Ringdown deviation threshold','Units','dB');
        case 'BS_std_bool'
            tmp = input_param_cl('Name','BS_std_bool','Value',true,'Default_value',true,'Value_range',[true false],...
                'Precision','%.d','Validation_fcn',@(x)  islogical(x),'Disp_name','Bottom Echo std thr.','Tooltipstring','Use Bottom Echo Backscatter Analysis','Units','');
        case 'BS_std'
            tmp = input_param_cl('Name','BS_std','Value',9,'Default_value',9,'Value_range',[0 inf],...
                'Precision','%.0f','Validation_fcn',@(x) isnumeric(x),'Disp_name','','Tooltipstring','Bottom echo deviation threshold','Units','dB');
        case 'Above'
            tmp = input_param_cl('Name','Above','Value',true,'Default_value',true,'Value_range',[true false],...
                'Precision','%d','Validation_fcn',@(x) islogical(x),'Disp_name','Above bot. echo std thr.','Tooltipstring','Use Above Bottom Echo Backscatter Analysis','Units','');
        case 'thr_spikes_Above'
            tmp = input_param_cl('Name','thr_spikes_Above','Value',3,'Default_value',3,'Value_range',[0 inf],...
                'Precision','%.0f','Validation_fcn',@(x) isnumeric(x),'Disp_name','','Tooltipstring','Above Bottom echo deviation threshold','Units','dB');
        case 'Below'
            tmp = input_param_cl('Name','Below','Value',false,'Default_value',false,'Value_range',[true false],...
                'Precision','%d','Validation_fcn',@(x) islogical(x),'Disp_name','Below bot. echo std thr.','Tooltipstring','Use Below Bottom Echo Backscatter Analysis','Units','');
        case 'thr_spikes_Below'
            tmp = input_param_cl('Name','thr_spikes_Below','Value',3,'Default_value',3,'Value_range',[0 inf],...
                'Precision','%.0f','Validation_fcn',@(x) isnumeric(x),'Disp_name','','Tooltipstring','Below bottom echo deviation threshold','Units','dB');
        case 'Additive'
            tmp = input_param_cl('Name','Additive','Value',true,'Default_value',true,'Value_range',[true false],...
                'Precision','%d','Validation_fcn',@(x) islogical(x),'Disp_name','Additive noise thr.','Tooltipstring','Use Additive Noise Filter','Units','');
        case 'thr_add_noise'
            tmp = input_param_cl('Name','thr_add_noise','Value',-140,'Default_value',-140,'Value_range',[-inf 0],...
                'Precision','%.0f','Validation_fcn',@(x) isnumeric(x),'Disp_name','','Tooltipstring','Additive noise threshold','Units','dB');
        case 'thr_spikes'
            tmp = input_param_cl('Name','thr_spikes','Value',10,'Default_value',10,'Value_range',[0 50],...
                'Precision','%.0f','Validation_fcn',@(x) isnumeric(x),'Disp_name','Spikes thr.','Tooltipstring','Threshold for spike detection (prominence)','Units','dB');
        case 'flag_bad_pings'
            tmp = input_param_cl('Name','flag_bad_pings','Value',100,'Default_value',100,'Value_range',[0 100],...
                'Precision','%d','Validation_fcn',@(x) isnumeric(x),'Disp_name','BP flag thr.','Tooltipstring','Bad Ping flag threshold (nothing removed if = 100)','Units','%');
        case 'l_min_can'
            tmp = input_param_cl('Name','l_min_can','Value',10,'Default_value',10,'Value_range',[0 inf],...
                'Precision','%.1f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Can. Min. Len','Tooltipstring','Candidate minimum length','Units','m');
        case 'h_min_can'
            tmp = input_param_cl('Name','h_min_can','Value',10,'Default_value',10,'Value_range',[0 inf],...
                'Precision','%.1f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Can. Min. Hght','Tooltipstring','Candidate minimum height','Units','m');
        case 'NoiseThr'
            tmp = input_param_cl('Name','NoiseThr','Value',-125,'Default_value',-125,'Value_range',[-150 -50],...
                'Precision','%.0f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Noise Level thr.','Tooltipstring','Maximum background noise level','Units','dB');
        case 'SNRThr'
            tmp = input_param_cl('Name','SNRThr','Value',3,'Default_value',3,'Value_range',[-10 50],...
                'Precision','%.1f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','SNR thr.','Tooltipstring','Minimum Signal to Noise Ratio','Units','dB');
        case 'PLDL'
            tmp = input_param_cl('Name','PLDL','Value',6,'Default_value',6,'Value_range',[3 12],...
                'Precision','%.0f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','PLDL','Tooltipstring','Pulse Length Determination Level','Units','dB');
        case 'MaxBeamComp'
            tmp = input_param_cl('Name','MaxBeamComp','Value',12,'Default_value',12,'Value_range',[0 20],...
                'Precision','%.0f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Max BP. Corr.','Tooltipstring','Maximum Beam Pattern Correction','Units','dB');
        case 'MinNormPL'
            tmp = input_param_cl('Name','MinNormPL','Value',0.6,'Default_value',0.6,'Value_range',[0.1 1],...
                'Precision','%.1f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Min Norm. PL','Tooltipstring','Minimum normalized pulse length','Units','');
        case 'MaxNormPL'
            tmp = input_param_cl('Name','MaxNormPL','Value',1.2,'Default_value',1.2,'Value_range',[1 2],...
                'Precision','%.1f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Max Norm. PL','Tooltipstring','Maximum normalized pulse length','Units','');
        case 'AlphaMajAxis'
            tmp = input_param_cl('Name','AlphaMajAxis','Value',0.3,'Default_value',0.3,'Value_range',[0 1],...
                'Precision','%.1f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Alpha Major','Tooltipstring','Alpha parameter for Major axis (across)','Units','');
        case 'AlphaMinAxis'
            tmp = input_param_cl('Name','AlphaMinAxis','Value',0.3,'Default_value',0.3,'Value_range',[0 1],...
                'Precision','%.1f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Alpha Minor','Tooltipstring','Alpha parameter for Minor axis (along)','Units','');
        case 'AlphaRange'
            tmp = input_param_cl('Name','AlphaRange','Value',0.3,'Default_value',0.3,'Value_range',[0 1],...
                'Precision','%.1f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Alpha Range','Tooltipstring','Alpha parameter for range','Units','');
        case 'BetaMajAxis'
            tmp = input_param_cl('Name','BetaMajAxis','Value',0.3,'Default_value',0.3,'Value_range',[0 1],...
                'Precision','%.1f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Beta Major','Tooltipstring','Beta parameter for Major axis (across)','Units','');
        case 'BetaMinAxis'
            tmp = input_param_cl('Name','BetaMinAxis','Value',0.3,'Default_value',0.3,'Value_range',[0 1],...
                'Precision','%.1f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Beta Minor','Tooltipstring','Beta parameter for Minor axis (along)','Units','');
        case 'BetaRange'
            tmp = input_param_cl('Name','BetaRange','Value',0.3,'Default_value',0.3,'Value_range',[0 1],...
                'Precision','%.1f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Beta Range','Tooltipstring','Beta parameter for range','Units','');
        case 'ExcluDistMajAxis'
            tmp = input_param_cl('Name','ExcluDistMajAxis','Value',1,'Default_value',1,'Value_range',[0 inf],...
                'Precision','%.1f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Excl. Dist. Maj.','Tooltipstring','Exclusion distance in meters on major axis (across)','Units','m');
        case 'ExcluDistMinAxis'
            tmp = input_param_cl('Name','ExcluDistMinAxis','Value',1,'Default_value',1,'Value_range',[0 inf],...
                'Precision','%.1f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Excl. Dist. Min.','Tooltipstring','Exclusion distance in meters on minor axis (along)','Units','m');
        case 'ExcluDistRange'
            tmp = input_param_cl('Name','ExcluDistRange','Value',1,'Default_value',1,'Value_range',[0 inf],...
                'Precision','%.1f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Excl. Dist. R.','Tooltipstring','Exclusion distance in meters on range','Units','m');
        case 'MissedPingExpMajAxis'
            tmp = input_param_cl('Name','MissedPingExpMajAxis','Value',5,'Default_value',5,'Value_range',[0 100],...
                'Precision','%.0f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Missed Pings Exp. Maj.','Tooltipstring','Expansion of exclusion distance between pings on major axis (across)','Units','%');
        case 'MissedPingExpMinAxis'
            tmp = input_param_cl('Name','MissedPingExpMinAxis','Value',5,'Default_value',5,'Value_range',[0 100],...
                'Precision','%.0f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Missed Pings Exp. Min.','Tooltipstring','Expansion of exclusion distance between pings on minor axis (along)','Units','%');
        case 'MissedPingExpRange'
            tmp = input_param_cl('Name','MissedPingExpRange','Value',5,'Default_value',5,'Value_range',[0 100],...
                'Precision','%.0f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Missed Pings Exp. R.','Tooltipstring','Expansion of exclusion distance between pings on range','Units','%');
        case 'WeightMajAxis'
            tmp = input_param_cl('Name','WeightMajAxis','Value',20,'Default_value',20,'Value_range',[0 100],...
                'Precision','%.0f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','W. Maj.','Tooltipstring','Weight attributed to position on major axis (across)','Units','');
        case 'WeightMinAxis'
            tmp = input_param_cl('Name','WeightMinAxis','Value',20,'Default_value',20,'Value_range',[0 100],...
                'Precision','%.0f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','W. Min.','Tooltipstring','Weight attributed to position on minor axis (along)','Units','');
        case 'WeightRange'
            tmp = input_param_cl('Name','WeightRange','Value',40,'Default_value',40,'Value_range',[0 100],...
                'Precision','%.0f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','W. R.','Tooltipstring','Weight attributed to position in range','Units','');
        case 'WeightTS'
            tmp = input_param_cl('Name','WeightTS','Value',10,'Default_value',10,'Value_range',[0 100],...
                'Precision','%.0f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','W. TS.','Tooltipstring','Weight attributed to TS value','Units','');
        case 'WeightPingGap'
            tmp = input_param_cl('Name','WeightPingGap','Value',10,'Default_value',10,'Value_range',[0 100],...
                'Precision','%.0f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','W. Ping Gap','Tooltipstring','Weight attributed to ping gap','Units','');
        case 'Min_ST_Track'
            tmp = input_param_cl('Name','Min_ST_Track','Value',3,'Default_value',3,'Value_range',[1 inf],...
                'Precision','%.0f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Min ST','Tooltipstring','Minimum number of single targets in track','Units','');
        case 'Min_Pings_Track'
            tmp = input_param_cl('Name','Min_Pings_Track','Value',5,'Default_value',5,'Value_range',[1 inf],...
                'Precision','%.0f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Min Pings','Tooltipstring','Minimum number of pings in track','Units','');
        case 'IgnoreAttitude'
            tmp = input_param_cl('Name','IgnoreAttitude','Value',false,'Default_value',false,'Value_range',[true false],...
                'Precision','%d','Validation_fcn',@(x) islogical(x),'Disp_name','Ignore attitude','Tooltipstring','Ignore attitude data when computing angles and distances','Units','');
        case 'bot_feat_comp_method'
            tmp = input_param_cl('Name','bot_feat_comp_method','Value','Echoview','Default_value','Echoview','Value_range',{'Echoview' 'Yoann' 'Rudy Kloser'},...
                'Precision','%s','Validation_fcn',@(x) ismember(lower(x),lower({'Echoview' 'Yoann' 'Rudy Kloser'})),'Disp_name','Computation Method','Tooltipstring','Method used for bottom features (E1/E2) computation','Units','');
        case 'estimated_slope'
            tmp = input_param_cl('Name','estimated_slope','Value',5,'Default_value',5,'Value_range',[-90 90],...
                'Precision','%d','Validation_fcn',@(x) isnumeric(x),'Disp_name','Estimated slope','Tooltipstring','Estimated sleafloor slope','Units',char(hex2dec('00B0')));
        case 'bot_ref_depth'
            tmp = input_param_cl('Name','bot_ref_depth','Value',100,'Default_value',100,'Value_range',[1 inf],...
                'Precision','%.0f','Validation_fcn',@(x)  isnumeric(x),'Disp_name','Bot. Depth Ref.','Tooltipstring','Bottom depth used as reference','Units','m');
        case 'SvThr'
            tmp  = input_param_cl('Name','SvThr','Value',-999,'Default_value',-999,'Value_range',[-inf +inf],...
                'Precision','%.1f','Validation_fcn',@(x) all(isnumeric(x)),'Disp_name','Sv thr.','Tooltipstring','Threshold to be applied on Sv during the echo-integration process','Units','dB');
        case 'Use_exclude_regions'
            tmp = input_param_cl('Name','Use_exclude_regions','Value',true,'Default_value',true,'Value_range',[true false],...
                'Precision','%d','Validation_fcn',@(x) islogical(x),'Disp_name','Exclude bad data regions','Tooltipstring','Exclude bad data regions','Units','');
        case 'Es60_correction'
            tmp = input_param_cl('Name','Es60_correction','Value',0,'Default_value',0,'Value_range',[-inf inf],...
                'Precision','%d','Validation_fcn',@(x) islogical(x),'Disp_name','ES60 triangle error correction','Tooltipstring','Value used to remove triangle wave error introduced in ES60 data. If set to 0 and a correction is needed, it will find it unless the file it too short (less than 2721 pings).','Units','dB');
        case 'Motion_correction'
            tmp = input_param_cl('Name','Motion_correction','Value',false,'Default_value',false,'Value_range',[true false],...
                'Precision','%d','Validation_fcn',@(x) islogical(x),'Disp_name','Motion correction','Tooltipstring','Apply motion correction algorithm as described in Dunford (2005)','Units','');
        case 'Shadow_zone'
            tmp = input_param_cl('Name','Shadow_zone','Value',false,'Default_value',false,'Value_range',[true false],...
                'Precision','%d','Validation_fcn',@(x) islogical(x),'Disp_name','Shadow Zone estimation','Tooltipstring','Shadow zone estimation taking into account pulse length, and difference between bathymetric and acousti seafloor.','Units','');
        case 'Shadow_zone_height'
            tmp = input_param_cl('Name','Shadow_zone_height','Value',10,'Default_value',10,'Value_range',[0 inf],...
                'Precision','%.1f','Validation_fcn',@(x) all(isnumeric(x)),'Disp_name','Height of shadow zone','Tooltipstring','Height above acoustic bottom detection used to estimate the content of the shadow zone','Units','m');
        case 'Vertical_slice_size'
            tmp = input_param_cl('Name','Vertical_slice_size','Value',10,'Default_value',10,'Value_range',[0.1 inf],...
                'Precision','%.1f','Validation_fcn',@(x) all(isnumeric(x)),'Disp_name','Vertical cell size','Tooltipstring','Vertical cell size used during echo_integration','Units','');
        case 'Vertical_slice_units'
            tmp = input_param_cl('Name','Vertical_slice_units','Value','pings','Default_value','pings','Value_range',{'meters' 'pings' 'seconds'},...
                'Precision','%s','Validation_fcn',@(x) ismember(lower(x),lower({'meters' 'pings' 'seconds'})),'Disp_name','','Tooltipstring','Vertical slice unit used for echo-integration','Units','');
        case 'Horizontal_slice_size'
            tmp = input_param_cl('Name','Horizontal_slice_size','Value',10,'Default_value',10,'Value_range',[0.1 inf],...
                'Precision','%.1f','Validation_fcn',@(x) all(isnumeric(x)),'Disp_name','Horizontal cell size','Tooltipstring','Horizontal cell size used during echo_integration','Units','m');
        case 'Cell_w'
            tmp = input_param_cl('Name','Cell_w','Value',10,'Default_value',10,'Value_range',[0.1 inf],...
                'Precision','%.1f','Validation_fcn',@(x) all(isnumeric(x)),'Disp_name','Cell width','Tooltipstring','Cell width for region','Units','');
        case 'Cell_w_unit'
            tmp = input_param_cl('Name','Cell_w_unit','Value','pings','Default_value','pings','Value_range',{'meters' 'pings' 'seconds'},...
                'Precision','%s','Validation_fcn',@(x) ismember(lower(x),lower({'meters' 'pings' 'seconds'})),'Disp_name','','Tooltipstring','Cell width unit','Units','');
        case 'Cell_h'
            tmp = input_param_cl('Name','Cell_h','Value',10,'Default_value',10,'Value_range',[0.1 inf],...
                'Precision','%.1f','Validation_fcn',@(x) all(isnumeric(x)),'Disp_name','Cell height','Tooltipstring','Cell height','Units','m');
        case 'IntType'
            tmp = input_param_cl('Name','IntType','Value','By Regions','Default_value','By Regions','Value_range',{'By Regions' 'WC' 'Regions Only'},...
                'Precision','%s','Validation_fcn',@(x) ismember(lower(x),lower({'By Regions' 'WC' 'Regions Only'})),'Disp_name','Echo-integration type','Tooltipstring','Type of echo-integration processing','Units','');
        case 'IntRef'
            tmp = input_param_cl('Name','IntRef','Value',list_echo_int_ref(1),'Default_value',list_echo_int_ref(1),'Value_range',list_echo_int_ref,...
                'Precision','%s','Validation_fcn',@(x) ismember(lower(x),lower(list_echo_int_ref)),'Disp_name','Echo-integration reference','Tooltipstring','Reference to be used for echo-integration processing','Units','');
        case 'Remove_tracks'
            tmp = input_param_cl('Name','Remove_tracks','Value',false,'Default_value',false,'Value_range',[true false],...
                'Precision','%d','Validation_fcn',@(x) islogical(x),'Disp_name','Exclude tracks','Tooltipstring','Exclude tracks from echo-integration','Units','');
        case 'Remove_ST'
            tmp = input_param_cl('Name','Remove_ST','Value',false,'Default_value',false,'Value_range',[true false],...
                'Precision','%d','Validation_fcn',@(x) islogical(x),'Disp_name','Exclude single-targets','Tooltipstring','Exclude single-targets from echo-integration','Units','');
        case 'Export_ST'
            tmp = input_param_cl('Name','Export_ST','Value',false,'Default_value',false,'Value_range',[true false],...
                'Precision','%d','Validation_fcn',@(x) islogical(x),'Disp_name','Export single-targets','Tooltipstring','Export single-targets during echo-integration','Units','');
        case 'Export_TT'
            tmp= input_param_cl('Name','Export_TT','Value',false,'Default_value',false,'Value_range',[true false],...
                'Precision','%d','Validation_fcn',@(x) islogical(x),'Disp_name','Export tracked targets','Tooltipstring','Export tracked targets during echo-integration','Units','');
        case 'Denoised'
            tmp = input_param_cl('Name','Denoised','Value',false,'Default_value',false,'Value_range',[true false],...
                'Precision','%d','Validation_fcn',@(x) islogical(x),'Disp_name','Use denoised Sv/Sp','Tooltipstring','Use data produced by the de-noising algorithm, if those have been computed.','Units','');
        case 'Frequency'
            tmp = input_param_cl('Name','Frequency','Value',38000,'Default_value',38000,'Value_range',[1e3 inf],...
                'Precision','%.0f','Validation_fcn',@(x) all(isnumeric(x)),'Disp_name','Frequency','Tooltipstring','Main reference frequency for echo-integration','Units','Hz');
        case 'Channel'
            tmp = input_param_cl('Name','Channel','Value','','Default_value','','Value_range','',...
                'Precision','%.0f','Validation_fcn',@(x) ischar(x),'Disp_name','Channel','Tooltipstring','Main reference channel for echo-integration. To be used in case of multiple channels with similar frequencies','Units','');
        case 'FrequenciesToLoad'
            tmp = input_param_cl('Name','FrequenciesToLoad','Value',[18000 38000 70000 120000 200000],'Default_value',[18000 38000 70000 120000 200000],'Value_range',[1e3 inf],...
                'Precision','%.0f','Validation_fcn',@(x) isempty(x)||all(isnumeric(x)),'Disp_name','Frequencies to load','MultiSelect',true,'Tooltipstring','Other reference frequencies to be loaded during echo-integration','Units','Hz');
        case 'FrequenciesMinToEI_FMmode'
            tmp = input_param_cl('Name','FrequenciesMinToEI_FMmode','Value',[12000 45000],'Default_value',[12000 45000],'Value_range',[1e3 inf],...
                'Precision','%.0f','Validation_fcn',@(x) isempty(x)||all(isnumeric(x)),'Disp_name','Min frequencies to EI','MultiSelect',true,'Tooltipstring','Minimum values of frequencies to be echo-integrated','Units','Hz');
        case 'FrequenciesMaxToEI_FMmode'
            tmp = input_param_cl('Name','FrequenciesMaxToEI_FMmode','Value',[27000 90000],'Default_value',[27000 90000],'Value_range',[1e3 inf],...
                'Precision','%.0f','Validation_fcn',@(x) isempty(x)||all(isnumeric(x)),'Disp_name','Max frequencies to EI','MultiSelect',true,'Tooltipstring','Maximum values of frequencies to be echo-integrated','Units','Hz');
        case 'ChannelsToLoad'
            tmp = input_param_cl('Name','ChannelsToLoad','Value',{},'Default_value',{},'Value_range',{},...
                'Precision','%s','Validation_fcn',@(x) isempty(x)||all(cellfun(@ischar,x)),'Disp_name','ChannelsToLoad','MultiSelect',true,'Tooltipstring','Other reference channels to be loaded during echo-integration. To be used in case of multiple channels with similar frequencies','Units','Hz');
        case 'CTD_profile_fname'
            tmp = input_param_cl('Name','CTD_profile_fname','Value','','Default_value','','Value_range','',...
                'Precision','%.0f','Validation_fcn',@(x) ischar(x),'Disp_name','CTD_pfname','Tooltipstring','Temperature and salinity profile file name.','Units','');            
        case 'Absorption'
            tmp = input_param_cl('Name','Absorption','Value',[2.7 9.8 22.8 37.4 52.7],'Default_value',[2.7 9.8 22.8 37.4 52.7],'Value_range',[0 inf],...
                'Precision','%.2f','Validation_fcn',@(x) all(isnumeric(x)),'Disp_name','Absorption','MultiSelect',true,'Tooltipstring','Sound absorption in water for all channels loaded. . Used if CTD profile is set to "constant".','Units','dB/km');
        case 'CopyBottomFromFrequency'
            tmp = input_param_cl('Name','CopyBottomFromFrequency','Value',false,'Default_value',false,'Value_range',[true false],...
                'Precision','%d','Validation_fcn',@(x) islogical(x),'Disp_name','Copy bottom from main frequency','Tooltipstring','Copy bottom from frequency to the other one that were loaded','Units','');
        case 'CTD_profile'
            tmp = input_param_cl('Name','CTD_profile','Value','constant','Default_value','constant','Value_range',{'constant' 'profile' 'theoritical'},...
                'Precision','%s','Validation_fcn',@(x) ismember(lower(x),lower({'constant' 'profile' 'theoritical'}))||isfile(x),'Disp_name','CTD','Tooltipstring','Temperature and salinity profile type.','Units','');
        case 'SVP_profile'
            tmp= input_param_cl('Name','SVP_profile','Value','constant','Default_value','constant','Value_range',{'constant' 'profile' 'theoritical'},...
                'Precision','%s','Validation_fcn',@(x) ismember(lower(x),lower({'constant' 'profile' 'theoritical'}))||isfile(x),'Disp_name','SVP','Tooltipstring','Sounspeed profile type.','Units','');
        case 'Temperature'
            tmp = input_param_cl('Name','Temperature','Value',12,'Default_value',12,'Value_range',[-10 90],...
                'Precision','%.1f','Validation_fcn',@(x) all(isnumeric(x)),'Disp_name','Temperature','Tooltipstring','Average water temperature. This will be used if the CTD or SVP profile is set to theoritical to produce the absorption and soundspeed profile.','Units','deg. C');
        case 'Salinity'
            tmp  = input_param_cl('Name','Salinity','Value',35,'Default_value',35,'Value_range',[0 50],...
                'Precision','%.1f','Validation_fcn',@(x) all(isnumeric(x)),'Disp_name','Salinity','Tooltipstring','Average salinity. This will be used if the CTD or SVP profile is set to theoritical to produce the absorption and soundspeed profile.','Units','PSU');
        case 'Soundspeed'
            tmp = input_param_cl('Name','Soundspeed','Value',1500,'Default_value',1500,'Value_range',[1200 1800],...
                'Precision','%.1f','Validation_fcn',@(x) all(isnumeric(x)),'Disp_name','Soundspeed','Tooltipstring','Average soundspeed. Used if SVP profile is set to "constant"','Units','m/s');
        case 'BadTransThr'
            tmp = input_param_cl('Name','BadTransThr','Value',100,'Default_value',100,'Value_range',[0 100],...
                'Precision','%.0f','Validation_fcn',@(x) all(isnumeric(x)),'Disp_name','Bad trans. thr.','Tooltipstring','Bad transmit percentage from which transects are rejected','Units','perc.');
        case 'ShiftBot'
            tmp = input_param_cl('Name','ShiftBot','Value',0,'Default_value',0,'Value_range',[-inf inf],...
                'Precision','%.1f','Validation_fcn',@(x) isempty(x)||all(isnumeric(x)),'Disp_name','Shift Bottom','MultiSelect',true,'Tooltipstring','Offset value by which the bottom definition needs to be shifted','Units','m');     
        case 'SaveBot'
            tmp = input_param_cl('Name','SaveBot','Value',false,'Default_value',false,'Value_range',[true false],...
                'Precision','%d','Validation_fcn',@(x) islogical(x),'Disp_name','Save bot.','Tooltipstring','Save bottom definition','Units','');
        case 'SaveReg'
            tmp = input_param_cl('Name','SaveReg','Value',false,'Default_value',false,'Value_range',[true false],...
                'Precision','%d','Validation_fcn',@(x) islogical(x),'Disp_name','Save reg.','Tooltipstring','Save region(s) definition(s)','Units','');
        case 'DepthMin'
            tmp  = input_param_cl('Name','DepthMin','Value',0,'Default_value',0,'Value_range',[0 inf],...
                'Precision','%.1f','Validation_fcn',@(x) all(isnumeric(x)),'Disp_name','Min. depth','Tooltipstring','Minimum depth for echo-integration','Units','m');
        case 'DepthMax'
            tmp = input_param_cl('Name','DepthMax','Value',inf,'Default_value',inf,'Value_range',[0 inf],...
                'Precision','%.1f','Validation_fcn',@(x) all(isnumeric(x)),'Disp_name','Max. depth','Tooltipstring','Maximum depth for echo-integration','Units','m');
        case 'RangeMin'
            tmp = input_param_cl('Name','RangeMin','Value',-inf,'Default_value',-inf,'Value_range',[-inf inf],...
                'Precision','%.1f','Validation_fcn',@(x) all(isnumeric(x)),'Disp_name','Min. range','Tooltipstring','Minimum range from transducer for echo-integration','Units','m');
        case 'RangeMax'
            tmp = input_param_cl('Name','RangeMax','Value',inf,'Default_value',inf,'Value_range',[-inf inf],...
                'Precision','%.1f','Validation_fcn',@(x) all(isnumeric(x)),'Disp_name','Max. range','Tooltipstring','Maximum range from transducer for echo-integration','Units','m');
        case 'RefRangeMin'
            tmp = input_param_cl('Name','RefRangeMin','Value',0,'Default_value',0,'Value_range',[-inf inf],...
                'Precision','%.1f','Validation_fcn',@(x) all(isnumeric(x)),'Disp_name','Min. range from ref.','Tooltipstring','Minimum range from reference for echo-integration','Units','m');
        case 'RefRangeMax'
            tmp = input_param_cl('Name','RefRangeMax','Value',inf,'Default_value',inf,'Value_range',[-inf inf],...
                'Precision','%.1f','Validation_fcn',@(x) all(isnumeric(x)),'Disp_name','Max. range from ref.','Tooltipstring','Maximum range from reference for echo-integration','Units','m');
        case 'AngleMin'
            tmp = input_param_cl('Name','AngleMin','Value',-inf,'Default_value',inf,'Value_range',[-inf inf],...
                'Precision','%.1f','Validation_fcn',@(x) all(isnumeric(x)),'Disp_name','Min. angle','Tooltipstring','Minimum angle for echo-integration. Only applies to MBES','Units','deg.');
        case 'AngleMax'
            tmp= input_param_cl('Name','AngleMax','Value',inf,'Default_value',inf,'Value_range',[-inf inf],...
                'Precision','%.1f','Validation_fcn',@(x) all(isnumeric(x)),'Disp_name','Max. angle','Tooltipstring','Minimum angle for echo-integration. Only applies to MBES','Units','deg.');
        case 'ExportSlicedTransects'
            tmp = input_param_cl('Name','ExportSlicedTransects','Value',true,'Default_value',true,'Value_range',[true false],...
                'Precision','%d','Validation_fcn',@(x) islogical(x),'Disp_name','Export sliced trans.','Tooltipstring','Export sliced transects in separate files','Units','');
        case 'ExportRegions'
            tmp  = input_param_cl('Name','ExportRegions','Value',false,'Default_value',false,'Value_range',[true false],...
                'Precision','%d','Validation_fcn',@(x) islogical(x),'Disp_name','Export sliced regions.','Tooltipstring','Export sliced regions in separate files','Units','');
        case 'RunInt'
            tmp = input_param_cl('Name','RunInt','Value',true,'Default_value',true,'Value_range',[true false],...
                'Precision','%d','Validation_fcn',@(x) islogical(x),'Disp_name','Run echo-int.','Tooltipstring','Run echo-integration or not. If not chosen, the echo-integration will not run, but files will be loaded','Units','');
        case 'DataType'
            tmp = input_param_cl('Name','DataType','Value','Data','Default_value',{'Data' 'Bad Data'},'Value_range',{'Data' 'Bad Data'},...
                'Precision','%s','Validation_fcn',@(x) ismember(lower(x),lower({'Data' 'Bad Data'})),'Disp_name','Data Type','Tooltipstring','Data type for region. "Bad Data" region create a region where data will be ignored during the echo-integration process.','Units','');
        case 'Tag'
            tmp = input_param_cl('Name','Tag','Value','','Default_value','','Value_range','',...
                'Precision','%s','Validation_fcn',@(x) ischar(x),'Disp_name','Tag','Tooltipstring','Region Tag, used to identify regions during echo-integation.','Units','');
        otherwise
            print_errors_and_warnings([],'Warning',sprintf('Unrecognised input_param_cl identifier %s',name{ilu}));
            continue;
    end
    input_params_vec = [input_params_vec tmp];
end

end