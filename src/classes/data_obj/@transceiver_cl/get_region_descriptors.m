function reg_descriptor = get_region_descriptors(trans_obj,region,varargin)

% input parser
p = inputParser;
addRequired(p,'trans_obj',@(x) isa(x,'transceiver_cl'));
addRequired(p,'region',@(x) isa(x,'region_cl'));
addParameter(p,'survey_data',survey_data_cl(),@(x) isa(x,'survey_data_cl'));
parse(p,trans_obj,region,varargin{:});

% pre-processing
ipings = region.Idx_ping(1):region.Idx_ping(end);
irange = region.Idx_r(1):region.Idx_r(end);
range_reg = trans_obj.get_samples_range(irange);
dist_reg  = trans_obj.get_dist(ipings);

% initialize reg_descriptor structure
% and fill with the trivial values
reg_descriptor = struct(...
    'SurveyName',p.Results.survey_data.SurveyName,...
    'Voyage',p.Results.survey_data.Voyage,...
    'Tag',region.Tag,...
    'ID',region.ID,...
    'Type',p.Results.survey_data.Type,...
    'Snapshot',p.Results.survey_data.Snapshot,...
    'Stratum',p.Results.survey_data.Stratum,...
    'Transect',p.Results.survey_data.Transect,...
    'Lat',mean(trans_obj.get_lat(ipings),'omitnan'),...
    'Lon',mean(trans_obj.get_long(ipings),'omitnan'),...
    'Time',datestr(mean(trans_obj.get_transceiver_time(ipings)),'dd/mm/yyyy HH:MM:SS'),...
    'Bottom_depth',mean(trans_obj.get_bottom_depth(ipings)),...
    'Length',diff([dist_reg(1) dist_reg(end)]),...
    'Height',diff([range_reg(1) range_reg(end)]),...
    'Mean_range',mean(range_reg),...
    'Max_range',max(range_reg),...
    'Min_range',min(range_reg),...
    'Perimeter',[],...
    'Area',[],...
    'Roundness',[]);

% build convex hull for region
reg_poly = region.Poly;
reg_poly.Vertices(:,1) = reg_poly.Vertices(:,1)*mean(diff(range_reg));

if all(dist_reg==0)
    reg_poly.Vertices(:,2) = reg_poly.Vertices(:,2);
else
    reg_poly.Vertices(:,2) = reg_poly.Vertices(:,2)*mean(diff(dist_reg));
end

conv_hull_poly = reg_poly.convhull;

% calculate perimeter, area, and roundness of convex hull
% and add to reg_descriptor
reg_descriptor.Area      = conv_hull_poly.area;
reg_descriptor.Perimeter = conv_hull_poly.perimeter;
reg_descriptor.Roundness = 4*pi*conv_hull_poly.area/conv_hull_poly.perimeter^2;

end