classdef config_cl
    properties
        EthernetAddress='--';

        IPAddress='--';
        SerialNumber='--';

        TransceiverName='--';
        TransceiverNumber=0;

        TransceiverSoftwareVersion='0';
        TransceiverType='';

        ChannelID='--';
        ChannelNumber=0;

        MaxTxPowerTransceiver=0;
        PulseLength=0.001;

        AngleOffsetAlongship=0;
        AngleOffsetAthwartship=0;

        AngleSensitivityAlongship=18;
        AngleSensitivityAthwartship=18;

        SoundSpeedNominal = 1476;

        SounderType  = 'Split-Beam';
        BeamType='split-beam';

        BeamWidthAlongship=7;
        BeamWidthAthwartship=7;

        EquivalentBeamAngle=0;

        Frequency=0;
        FrequencyMaximum=0;
        FrequencyMinimum=0;

        Gain=0;
        Impedance=1e3;%ohms
        Ztrd=75;%ohms
        MaxTxPowerTransducer=0;
        SaCorrection=0;
        TransducerName=''
        XML_string='';
        Cal_FM=struct.empty();

        TransducerAlphaX=0;%roll
        TransducerAlphaY=0;%pitch
        TransducerAlphaZ=0;%yaw

        TransducerMounting='';

        TransducerOffsetX=0;%along
        TransducerOffsetY=0;%across
        TransducerOffsetZ=0;%depth
        TransducerOrientation='--';
        TransducerSerialNumber='--';

        MotionCompBool = [false false false false]; %Roll/Pitch/Yaw/Heave
        MotionCompStr = ["Roll" "Pitch"  "Yaw" "Heave"];

        Version='--';
        EsOffset=0;

        NbQuadrants=1;

        RXArrayShape = 'flat';
        TXArrayShape = 'flat';
    end

    methods(Static)
        function ff  = get_config_cal_fields()
            ff = {...
                'BeamWidthAthwartship'...
                'BeamWidthAlongship'...
                'AngleOffsetAlongship'...
                'AngleOffsetAthwartship'...
                'AngleSensitivityAlongship'...
                'AngleSensitivityAthwartship'};

            ff = intersect(ff,properties(config_cl));
        end
    end

    methods
        function config_obj = config_cl(varargin)

            if nargin>=1
                ss = varargin{1};
                ff = fieldnames(ss);
                for uif = 1:numel(ff)
                    if isprop(config_obj,ff{uif})
                        config_obj.(ff{uif})  = ss.(ff{uif});
                    end
                end

            end
        end

        function config_obj = update_config_obj_from_xml(config_obj,xml_file)
            fid=fopen(xml_file,'r');
            t_line=fread(fid,'*char');
            t_line=t_line';
            fclose(fid);
            xstruct=xml2struct(t_line);
            if isfield(xstruct,'SounderConfiguration')
                if isscalar(xstruct.SounderConfiguration.Channels.Channel)
                    cids = {xstruct.SounderConfiguration.Channels.Channel.Attributes.ChannelID};
                else
                    cids = cellfun(@(x) x.Attributes.ChannelID,xstruct.SounderConfiguration.Channels.Channel,'un',false);
                end

                for ui = 1:numel(config_obj)
                    idx_chan = find(strcmpi(config_obj(ui).ChannelID,cids));
                    if isempty(idx_chan)
                        continue;
                    end
                    if iscell(xstruct.SounderConfiguration.Channels.Channel)
                        tmp_chan = xstruct.SounderConfiguration.Channels.Channel{idx_chan};
                    else
                        tmp_chan = xstruct.SounderConfiguration.Channels.Channel(idx_chan);
                    end
                    fields = fieldnames(tmp_chan.Attributes);
                    for uif = 1:numel(fields)
                        if ~isprop(config_obj(ui),fields{uif})
                            continue;
                        end
                        val_temp = nan;
                        val = tmp_chan.Attributes.(fields{uif});

                        if isnumeric(config_obj(ui).(fields{uif})) || islogical(config_obj(ui).(fields{uif})) || strcmpi(fields{uif},'MotionCompBool')
                            if contains(val,';')
                                val_temp=double(sscanf([val ';'],'%f;'));
                            elseif isnumeric(config_obj(ui).(fields{uif}))
                                val_temp  = str2double(val);
                            end
                        else
                            val_temp = val;
                        end

                        if any(isnan(val_temp))||isempty(val_temp)
                            config_obj(ui).(fields{uif}) = deblank(val);
                        elseif numel(config_obj(ui).(fields{uif})) == numel(val_temp)
                            if size(val_temp,1) ~= size(config_obj(ui).(fields{uif}),1)
                                val_temp = val_temp';
                            end
                            config_obj(ui).(fields{uif}) = val_temp;
                        end

                        if islogical(config_obj(ui).(fields{uif})) || strcmpi(fields{uif},'MotionCompBool')
                            config_obj(ui).(fields{uif}) = config_obj(ui).(fields{uif})>0;
                        end
                    end
                end
            end
        end

        function [config_str,fields,fields_name,fact,fields_fmt,fields_units]=config2str(config_obj)
            fields = {'ChannelID',...
                'TransceiverName',...
                'SerialNumber',...
                'TransducerName',...
                'TransducerSerialNumber',...
                'NbQuadrants',...
                'TransceiverSoftwareVersion',...
                'IPAddress',...
                'Frequency',...
                'FrequencyMinimum',...
                'FrequencyMaximum',...
                'BeamWidthAlongship',...
                'BeamWidthAthwartship',...
                'BeamType',...
                'EquivalentBeamAngle',...
                'AngleOffsetAlongship',...
                'AngleOffsetAthwartship',...
                'AngleSensitivityAlongship',...
                'AngleSensitivityAthwartship'...
                'TransducerAlphaX', ...
                'TransducerAlphaY', ...
                'TransducerAlphaZ', ...
                'TransducerOffsetX', ...
                'TransducerOffsetY', ...
                'TransducerOffsetZ'};


            fields_name = {'Channel ID',...
                'Transceiver Name',...
                'Transceiver Serial Number',...
                'Transducer Name',...
                'Transducer Serial Number',...
                'Number of Quadrants',...
                'Transceiver Software Version',...
                'IP Address',...
                'Nominal Frequency',...
                'Min Frequency',...
                'Max Frequency',...
                'BeamWidth Alongship',...
                'BeamWidth Athwartship',...
                'Beam Type',...
                'Equivalent Beam Angle'...
                'Angle Offset Alongship',...
                'Angle Offset Athwartship',...
                'Angle Sensitivity Alongship',...
                'Angle Sensitivity Athwartship',...
                'TransducerAlphaX', ...
                'TransducerAlphaY', ...
                'TransducerAlphaZ', ...
                'TransducerOffsetX', ...
                'TransducerOffsetY', ...
                'TransducerOffsetZ'};

            fact = [...
                1,...%'Channel ID',...
                1,...%'Transceiver Name',...
                1,...
                1,...%'Transducer Name',...
                1,...
                1,...%'Number of Quadrants',...
                1,...%'Transceiver Software Version',...
                1,...%'IP Address',...
                1e-3,...%'Frequency',...
                1e-3,...%'Min Frequency',...
                1e-3,...%'Max Frequency',...
                1,...%'BeamWidth Alongship',...
                1,...%'BeamWidth Athwartship',...
                1,...%'Beam Type',...
                1,...%'Equivalent Beam Angle'...
                1,...%'Angle Offset Alongship',...
                1,...%'Angle Offset Athwartship',...
                1,...%'Angle Sensitivity Alongship',...
                1,...%'Angle Sensitivity Athwartship'
                1,...
                1,...
                1,...
                1,...
                1,...
                1
                ];

            fields_fmt = {'%s',...
                '%s',...
                '%s',...
                '%s',...
                '%s',...
                '%d',...
                '%s',...
                '%s',...
                '%.2f',...
                '%.2f',...
                '%.2f',...
                '%.2f',...
                '%.2f',...
                '%s',...
                '%.2f',...
                '%.2f',...
                '%.2f',...
                '%.2f',...
                '%.2f',...
                '%.2f',...
                '%.2f',...
                '%.2f',...
                '%.2f',...
                '%.2f',...
                '%.2f'};

            fields_units = {'',...
                '',...
                '',...
                '',...
                '',...
                '',...
                '',...
                '',...
                'kHz',...
                'kHz',...
                'kHz',...
                '&deg',...
                '&deg',...
                '',...
                'dB ',...
                '&deg',...
                '&deg',...
                '',...
                '',...
                '&deg',...
                '&deg',...
                '&deg',...
                'm',...
                'm',...
                'm'};


            config_str ='<html><ul>Configuration:';
            range_bool = false(1,numel(fields));
            for ifi=1:length(fields)
                val=config_obj.(fields{ifi});
                
                if isnumeric(config_obj.(fields{ifi}))
                    val = fact(ifi)*val;
                    if numel(val)>1
                        range_bool(ifi) = true;
                    end
                end
                
                if ~isnan(val)
                    if range_bool(ifi)
                        config_str = [config_str sprintf('<li><i>%s: </i>%s%s</li>',fields_name{ifi},sprintf(['From ' fields_fmt{ifi} ' to ' fields_fmt{ifi}],min(val,[],'all'),max(val,[],'all')),fields_units{ifi})];
                    else
                        config_str = [config_str sprintf('<li><i>%s: </i>%s%s</li>',fields_name{ifi},sprintf(fields_fmt{ifi},val),fields_units{ifi})];
                    end
                end
            end
            config_str = [config_str '</ul></html>'];
        end

        function config_out = group_config(config_in)
            props = properties(config_cl);
            config_out = config_cl();
            config_beams = {'Gain' 'SaCorrection' 'Frequency' 'FrequencyMinimum' 'FrequencyMaximum' 'AngleSensitivityAlongship' 'AngleSensitivityAthwartship' 'BeamWidthAlongship' 'BeamWidthAthwartship' 'EquivalentBeamAngle'};
            for uip = 1:numel(props)
                if isnumeric(config_in(1).(props{uip}))
                    tmp = [config_in(:).(props{uip})];
                    u_tmp = unique(tmp);
                    if isscalar(unique(tmp)) && ~ismember(props{uip},config_beams)
                        tmp = u_tmp;
                    end
                    config_out.(props{uip}) = tmp;
                elseif islogical(config_in(1).(props{uip}))
                    config_out.(props{uip}) = config_in(1).(props{uip});
                elseif ischar(config_in(1).(props{uip}))
                    config_out.(props{uip}) = strjoin(unique({config_in(:).(props{uip})}),'\n');
                end
            end

        end

        function config_obj_to_xml(config_obj,xml_file)

            docNode = com.mathworks.xml.XMLUtils.createDocument('SounderConfiguration');
            Configuration = docNode.getDocumentElement;
            Header = docNode.createElement('Header');
            Configuration.appendChild(Header);
            props = properties(config_cl);

            Channels = docNode.createElement('Channels');
            Configuration.appendChild(Channels);

            for itt=1:length(config_obj)

                channel = docNode.createElement('Channel');
                for uip = 1:numel(props)
                    if isnumeric(config_obj(itt).(props{uip}))
                        if isscalar(config_obj(itt).(props{uip}))
                            channel.setAttribute(props{uip},num2str(config_obj(itt).(props{uip})));
                        else
                            channel.setAttribute(props{uip},strjoin(cellfun(@num2str,num2cell(config_obj(itt).(props{uip})),'un',false),';'));
                        end
                    elseif ischar(config_obj(itt).(props{uip}))
                        channel.setAttribute(props{uip},config_obj(itt).(props{uip}));
                    elseif isstring(config_obj(itt).(props{uip}))
                        channel.setAttribute(props{uip},strjoin(config_obj(itt).(props{uip}),';'));
                    end
                end

                Channels.appendChild(channel);

            end

            for uif = 1:numel(xml_file)
                xmlwrite(xml_file{uif},docNode);
                fprintf('Configuration written to %s\n',xml_file{uif});
            end
        end


        function cal  = get_cal_fields(obj,cal)
            config_fields =obj.get_config_cal_fields();

            for ui = 1:numel(config_fields)
                cal.(config_fields{ui}) = obj.(config_fields{ui});
            end
        end

        function delete(obj)

            if  isdebugging
                c = class(obj);
                disp(['ML object destructor called for class ',c])
            end
        end


    end
end

